extends ../../../views/shared/_layout
block StylesBlock
    style.
        .link {
            stroke: #aaaaaa;
            stroke-width: 1.5px;
        }

        .node {
            cursor: move;
            fill: #fff;
            stroke: #000;
            stroke-width: 1.5px;
        }

        .node.fixed {
            fill: #f00;
        }

        text {
            font: 15px sans-serif;
            pointer-events: none;
            text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
        }


block ContentBlock

    .row
        .col-xs-12
            h3.page-title #{pageTitle}
    .row
        .col-xs-12

            .card
                .card-block
                    a.btn.btn-suucess.save-btn(href='#save')= save.btn
                    .map-scope


block ScriptsPluginBlock
block ScriptsBlock

    script(type='application/javascript', src='https://d3js.org/d3.v3.min.js')
    script(type='application/javascript').
        var nodesData = !{JSON.stringify(data)};
        var toastrSave = '!{save.toastr}';
        var toolTipWords = !{JSON.stringify(tooltip)};

        var IsEditMode = false;

        function getXY(d) {
            switch (d.node_type) {
                case 'host': return -22.5;
                case 'router': return 5;
                default: return -35;
            }
        }

        function getWH(d) {
            switch (d.node_type) {
                case 'host': return 45;
                case 'router': return 60;
                default: return 70;
            }
        }

        function dblclick(d) {
            d3.select(this).select('circle').classed("fixed", d.fixed = false);
        }

        function draw(nodes, links) {
            var width = $('.map-scope').width(), height = 500;
            var circleR = 35;

            var force = d3.layout.force()
                    .size([width, height]).charge(-400)
                    .linkDistance(100).on('tick', tick);

            //var drag = force.drag().on("dragstart", dragstart);

            var drag = d3.behavior.drag().on('dragstart', dragstart).on('drag', dragmove).on('dragend', dragend);

            function dragstart(d, i) {
                if (IsEditMode) { return; }

                force.stop()
            }

            function dragmove(d, i) {
                if (IsEditMode) { return; }

                var insideY = d.y >= circleR && d.y <= (height - circleR);
                var insideX = d.x >= circleR && d.x <= (width - circleR);

                if (!(insideY && insideX)) {
                    if (d.x <= circleR && d3.event.dx < 0) {
                        return;
                    }

                    if (d.y <= circleR && d3.event.dy < 0) {
                        return;
                    }

                    if (d.x >= (width - circleR) && d3.event.dx > 0) {
                        return;
                    }

                    if (d.y >= (height - circleR) && d3.event.dy > 0) {
                        return;
                    }
                }

                d.px += d3.event.dx;
                d.py += d3.event.dy;
                d.x += d3.event.dx;
                d.y += d3.event.dy;

                tick();
            }

            function dragend(d, i) {
                if (IsEditMode) { return; }

                d.fixed = true;

                tick();

                force.resume();
            }

            var svg = d3.select('.map-scope').append('svg')
                    .attr('width', width)
                    .attr('height', height);

            force.nodes(d3.values(nodes)).links(links).start();

            var link = svg.selectAll('.link').data(force.links())
                    .enter().append('line').attr('class', 'link');

            var node = svg.selectAll('.node').data(force.nodes())
                    .enter().append('g').attr('class', 'node-item').on('dblclick', dblclick).call(drag).call(function (d) {
                        d[0].forEach(function (item) {
                            if (item.__data__.node_type) {
                                $(item).tooltip({
                                    title: item.__data__.tooltipData, html: true, trigger: 'hover', delay: {hide: 700}
                                });
                            }
                        });
                    });

            var text = svg.append('g').selectAll('text')
                    .data(force.nodes())
                    .enter().append('text')
                    .text(function (d) {
                        return d.hostname;
                    })
                    .attr('x', function (d) {
                        return -this.getComputedTextLength() / 2;
                    }).attr('y', -45);

            node.append('circle').attr('class', 'node')
                    .attr('style', function (d) {
                        if (d.node_type && !d.status) {
                            return 'fill: red';
                        } else if (!d.node_type) {
                            return 'fill: #fff';
                        } else {
                            return 'fill: #25d634';
                        }
                    })
                    .attr("r", circleR);

            node.append('image')
                    .attr('style', 'cursor: move;')
                    .attr('x', getXY).attr('y', getXY)
                    .attr('width', getWH).attr('height', getWH)
                    .attr('xlink:href', function (d) {
                        return '/img/netmap/' + (d.node_type || 'cloud') + '-104.svg';
                    });

            function tick() {
                link.attr('x1', function (d) { return d.source.x; })
                    .attr('y1', function (d) { return d.source.y; })
                    .attr('x2', function (d) { return d.target.x; })
                    .attr('y2', function (d) { return d.target.y; });

                node.attr('transform', function (d) { return 'translate(' + d.x + "," + d.y + ')' });
                text.attr('transform', function (d) { return 'translate(' + d.x + "," + d.y + ')' });
            }
        }

        function onSavelBtnClick(e) {
            e.preventDefault();

            d3.select('svg').selectAll('.node-item').each(function (d, i) {
                localStorage.setItem(d.hostname + '.x', d.x);
                localStorage.setItem(d.hostname + '.y', d.y);
            });

            toastr.success(toastrSave);
        }

        $(function () {
            setActiveLink('#monitoring', '#monitoring-netmap-sub');

            $('.save-btn').on('click', onSavelBtnClick);

            var i = nodesData.length;
            while (i--) {
                nodesData[i].children = [];
                nodesData[i].parent = null;
                nodesData[i]._ipList = [];
                nodesData[i].inets.forEach(function (item) {
                    item._ip = item.ip.slice();
                    item.ip = item.ip.map(function (item) {
                        return item.address;
                    });

                    nodesData[i]._ipList = nodesData[i]._ipList.concat(item.ip);
                });
            }

            var links = [];
            var nodes = {};
            for (i = 0; i < nodesData.length; i++) {
                var cur = nodesData[i];
                for (var y = 0; y < nodesData.length; y++) {
                    if (y == i) {
                        continue;
                    }

                    var next = nodesData[y];

                    if (cur._ipList.indexOf(next.gw) >= 0) {
                        cur.children.push(next);

                        next.parent = cur;

                        nodes[cur.hostname] = cur;
                        nodes[next.hostname] = next;

                        links.push({source: nodes[cur.hostname], target: nodes[next.hostname]});
                    }
                }
            }

            nodesData.forEach(function (item) {
                nodes[item.hostname] = nodes[item.hostname] || (nodes[item.hostname] = {
                            hostname: item.hostname
                        });
                nodes[item.hostname].node_type = item.node_type;
                nodes[item.hostname].status = item.status;
                nodes[item.hostname].tooltipData =
                    '<span>' + toolTipWords.state + ': </span><span class="label label-' +
                    (item.status ? 'success"> UP' : 'danger"> DOWN') + '</span></br>';

                nodes[item.hostname].tooltipData += '<span>{0}:<br>OK: <span class="label label-success">{1} / {3}</span><br>CRIT: <span class="label label-danger">{2} / {3}</span></span><br/>'.f(
                        toolTipWords.metrics.title, 65, 0, 65);

                nodes[item.hostname].tooltipData += '<a href="/monitoring/nodes#' + item._id + '">{0}</a>'.f(
                        toolTipWords.metrics.more, 0);

                console.log(nodes[item.hostname].tooltipData);

                if (item.parent == null) {
                    nodes[item.gw] = nodes[item.gw] || (nodes[item.gw] = {
                                hostname: item.gw,
                                node_type: null,
                                status: 1
                            });
                    links.push({source: nodes[item.gw], target: nodes[item.hostname]});
                }
            });

            for (var k in nodes) {
                var x = localStorage.getItem(k + '.x');
                var y = localStorage.getItem(k + '.y');
                if (x && y) {
                    nodes[k].x = parseFloat(x);
                    nodes[k].y = parseFloat(y);
                    nodes[k].fixed = true;
                }
            }

            draw(nodes, links);
        });